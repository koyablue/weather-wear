import { ReactElement } from 'react'
import Head from 'next/head'
import { SWRConfig, unstable_serialize } from 'swr'
import {
  Container,
  // Main,
  Title,
  Description,
  CodeTag,
} from '../components/sharedstyles'
import Cards from '../components/cards'

import Main from '../components/pages/main'
import { GetServerSideProps } from 'next'
import { cookies } from 'next/dist/client/components/headers'
import BaseLayout from '../components/layouts/baseLayout'
import { getUserLocationServer } from '../services/queries/server/getUserLocationServer'
import { GeolocationApiResponse } from '../types/geolocationApi'
import { getCurrentWeatherClient } from '../services/queries/client/getCurrentWeatherClient'
import { getCurrentWeatherServer } from '../services/queries/server/getCurrentWeatherServer'
import { CurrentWeatherApiResponse } from '../types/weatherApi'


export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  console.log('SSR index.tsx')

  const fields = []
  let userLocation: Partial<GeolocationApiResponse> | null
  let currentWeather: CurrentWeatherApiResponse | null

  try {
    userLocation = await getUserLocationServer(fields)
    // TODO: get weather(unit=metric) -> Math.round(main.temp)
    // TODO: if (max - min) >= 5 -> two options or notes()

    // TODO: message is like this: "Big temperature swing today. Dress in adjustable clothing."
    // TODO: or like this: "Stay prepared for temperature changes. Wear adjustable clothing." <- better?

      // TODO: if location is undefined getting lat, lon will be an error. Fix it.
    currentWeather = await getCurrentWeatherServer(userLocation.latitude, userLocation.longitude, 'metric')
  } catch(error) {
    userLocation = null
    currentWeather = null
  }

  return {
    props: {
      fallback: {
        [unstable_serialize(['userLocation/get', fields])]: userLocation,
        [unstable_serialize(['currentWeather/get', userLocation?.latitude, userLocation?.longitude, 'metric'])]: currentWeather
      },
    },
  }
}


type PageProps = {
  fallback: {
    [key: string]: any
  }
}

// TODO: global error handling

const Home = ({ fallback }: PageProps) => {
  return (
    <SWRConfig value={{fallback}}>
      <Main />
    </SWRConfig>
    // <Container>
    //   <Head>
    //     <title>Create Next App</title>
    //     <meta name="description" content="Generated by create next app" />
    //     <link rel="icon" href="/favicon.ico" />
    //   </Head>
    //   <Main>
    //     <Title>
    //       Welcome to <a href="https://nextjs.org">Next.js!</a>
    //     </Title>

    //     <Description>
    //       Get started by editing
    //       <CodeTag>pages/index.tsx</CodeTag>
    //     </Description>

    //     <Cards />
    //   </Main>
    // </Container>
  )
}

Home.getLayout = (page: ReactElement) => (
  <BaseLayout>{page}</BaseLayout>
)

export default Home
